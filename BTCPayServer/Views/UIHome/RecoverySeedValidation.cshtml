@model RecoverySeedValidationViewModel
@{
    Layout = "_LayoutSimple";
    ViewData["Title"] = "Validate recovery phrase";
    int index = 0;
}

@section PageHeadContent {
    <style>
        @@media (min-width: 476px) { ol#RecoveryPhrase {max-height:26em;} }
        @@media (min-width: 768px) { ol#RecoveryPhrase {max-height:22em;} }
        @@media (min-width: 1200px) { ol#RecoveryPhrase {max-height:18em;} }
        form#RecoveryConfirmation button { position: absolute; bottom:0; left:50%; width:200px; margin-left:-100px; }
        form#RecoveryConfirmation button:not([disabled]) { display: none; }
        form#RecoveryConfirmation input:checked ~ button[disabled] { display: none; }
        form#RecoveryConfirmation input:checked + button:not([disabled]) { display: inline-block; }
    </style>
}

@section PageFootContent {
    <partial name="_ValidationScriptsPartial" />
}

<div class="row justify-content-md-center">
    <div class="col-lg-10 text-center">
        <partial name="_StatusMessage" />

        <div class="d-flex flex-column align-items-center justify-content-center">
            <span class="fa fa-info-circle align-self-center p-3" style="font-size:4em;"></span>

            <h1 class="text-center text-primary mb-5">Let's double-check</h1>
        </div>
        <div class="lead text-center">
            <p>
                <span class="d-sm-block"><strong>Click the words in the correct order.</strong></span>
            </p>
        </div>
        <ol id="RecoveryPhrase" data-mnemonic="@Model.Mnemonic" class="my-5 d-flex flex-row flex-wrap justify-content-end align-items-end text-start p-0">
            @foreach (var word in Model.ShuffleWords)
            {
                index = index+1;
                <li class="ms-4 px-3 py-2 text-secondary" style="width:35%">
                    <button type="submit" id="CheckWord" class="btn btn-outline-info ms-4 px-3 w-1.5 py-2 text-secondary" style="width: 6rem"id="btnCheckWord" onclick="changeColor(this, '@word', @index)">@word</button>
                </li>
            }
        </ol>
    </div>
</div>


<script>
  function changeColor(button, word, index) {
  if (index < 0 || index >= @Model.Words.Length) {
    return;
  }
  console.log(`index: ${index} word: ${word} wordAtIndex: ${"@Model.Words[index-1]"}`)
  if (word.localeCompare('@Model.Words[index-1]') == 0) {
    var button = document.querySelectorAll('.btn-outline-info')[index-1];
    button.style.backgroundColor = 'green';
  }
}
</script>